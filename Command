Step 1 - Firstly check git present on your server or not.

root@ip-172-31-33-254:/home/ubuntu# git --version
git version 2.43.0
--------------------------------------------------------------------
Step 2 - Make 1 diectory.

root@ip-172-31-33-254:/home/ubuntu# mkdir gitlab
--------------------------------------------------------------------
Step 3 - Write some content to your file.

root@ip-172-31-33-254:/home/ubuntu# cd gitlab
root@ip-172-31-33-254:/home/ubuntu/gitlab# vim practice
root@ip-172-31-33-254:/home/ubuntu/gitlab# cat practice
Hello Pooja
-------------------------------------------------------------------
Step 4 - Git Init command helps to make compatible to your server to Git.

root@ip-172-31-33-254:/home/ubuntu/gitlab# git init
hint: Using 'master' as the name for the initial branch. This default branch name
hint: is subject to change. To configure the initial branch name to use in all
hint: of your new repositories, which will suppress this warning, call:
hint: 
hint:   git config --global init.defaultBranch <name>
hint: 
hint: Names commonly chosen instead of 'master' are 'main', 'trunk' and
hint: 'development'. The just-created branch can be renamed via this command:
hint: 
hint:   git branch -m <name>
Initialized empty Git repository in /home/ubuntu/gitlab/.git/
-------------------------------------------------------------------
Step 5 - .git is generated helps to maintain versioning..

root@ip-172-31-33-254:/home/ubuntu/gitlab# ls -a
.  ..  .git  practice
-------------------------------------------------------------------
root@ip-172-31-33-254:/home/ubuntu/gitlab# vim practice 
root@ip-172-31-33-254:/home/ubuntu/gitlab# ls
practice
------------------------------------------------------------------
Step 6 - git add . helps to go on staging step.

root@ip-172-31-33-254:/home/ubuntu/gitlab# git add .
------------------------------------------------------------------
Step 7 - git status help to check stage is commited or not.

root@ip-172-31-33-254:/home/ubuntu/gitlab# git status
On branch master

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
        new file:   practice
------------------------------------------------------------------
Step 8 - git commit -m "Pass your msg here" helps to commit your stage.

root@ip-172-31-33-254:/home/ubuntu/gitlab# git commit -m "This is first version"
[master (root-commit) 6bd9da9] This is first version
 Committer: root <root@ip-172-31-33-254.us-east-2.compute.internal>
Your name and email address were configured automatically based
on your username and hostname. Please check that they are accurate.
You can suppress this message by setting them explicitly. Run the
following command and follow the instructions in your editor to edit
your configuration file:

    git config --global --edit

After doing this, you may fix the identity used for this commit with:

    git commit --amend --reset-author

 1 file changed, 2 insertions(+)
 create mode 100644 practice
-----------------------------------------------------------------------
Step 9 - Again do some changes in file & check the status.

root@ip-172-31-33-254:/home/ubuntu/gitlab# vim practice 
root@ip-172-31-33-254:/home/ubuntu/gitlab# git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   practice
-------------------------------------------------------------------------
Step 9 - git diff (+ sign will show at stating ) helps to check where the latest change is done by developer.

root@ip-172-31-33-254:/home/ubuntu/gitlab# git diff
diff --git a/practice b/practice
index f48398d..c9b97cb 100644
--- a/practice
+++ b/practice
@@ -1,2 +1,3 @@
 Hello Pooja
 This is first part.
+hye buddy
--------------------------------------------------------------------------
Step 10 - Again you need to add your latest change.

root@ip-172-31-33-254:/home/ubuntu/gitlab# git add .
-------------------------------------------------------------------------
Step 11 - Then finally commit your file.

root@ip-172-31-33-254:/home/ubuntu/gitlab# git commit -m "this is second version"
[master a7659c1] this is second version
 Committer: root <root@ip-172-31-33-254.us-east-2.compute.internal>
Your name and email address were configured automatically based
on your username and hostname. Please check that they are accurate.
You can suppress this message by setting them explicitly. Run the
following command and follow the instructions in your editor to edit
your configuration file:

    git config --global --edit

After doing this, you may fix the identity used for this commit with:

    git commit --amend --reset-author

 1 file changed, 1 insertion(+)
---------------------------------------------------------------------
root@ip-172-31-33-254:/home/ubuntu/gitlab# git status
On branch master
nothing to commit, working tree clean
---------------------------------------------------------------------
Step 12 - git log will show you, all your logs and it generate the unique sha id on every change by using that sha id you can track your versions.

root@ip-172-31-33-254:/home/ubuntu/gitlab# git log
commit a7659c123b15ef40fa70933b13546a1d65ad1d7e (HEAD -> master)
Author: root <root@ip-172-31-33-254.us-east-2.compute.internal>
Date:   Thu Jul 17 11:45:32 2025 +0000

    this is second version

commit 6bd9da97e65c8cd55901fd4298ce1be12ac5eac0
Author: root <root@ip-172-31-33-254.us-east-2.compute.internal>
Date:   Thu Jul 17 11:43:08 2025 +0000

    This is first version
